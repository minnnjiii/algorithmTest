#include <iostream>
#include <queue>
#include <algorithm>


using namespace std;


// 최단 거리가 아닌, 최소 리모컨 조작 횟수로
// 출발지에 목적지까지 ㄱㄱ

// RC카를 이동하려는데 나무가 막혀서 아빠가 그 나무 베려고 함
// 아빠가 벨 수 있는 최대 나무의 수가 주어졌을 때 
// 차윤이가 RC카를 목적지까지 이동시키기 위한
// 최소 조작 횟수는? 


// 차윤은 항상 위를 바라보는 상태로 RC카 조작 시작


// ⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️ 필요한 변수들 선언 ⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️

int T; //test case
int N, K; //맵의 크기 N, 나무를 벨 수 있는 횟수 K
int init_X, init_Y; // RC카의 처음 시작 위치
int target_X, target_Y; // 목표지점
char map[10][10]; // 맵 정보를 받을 2차 배열 선언
char visited[10][10][4][6];

struct State {
    int x, y, dir, cuts, moves;
    // x좌표, y좌표, 현재 방향, 나무를 자를 수 있는 횟수, 얼마나 움직였는지
};

int dx[4] = {-1, 0, 1, 0}; // 북, 동, 남, 서 방향 이동
int dy[4] = {0, 1, 0, -1};

// ⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆
// ⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️ 필요한 변수들 선언 ⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️




// ⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️
// ⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️BFS 함수 ⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️

int BFS(int startX, int startY, int endX, int endY)
{
    // visited를 -1로 초기화
    memset(visited, -1, sizeof(visited));
    queue<State> q;
    q.push({startX, startY, 0,0,0}); // 시작 위치, 방향(북쪽), 나무 자른 횟수, 이동 횟수
    visited[startX][startY][0][0] = 0;

    
    


}


// ⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️
// ⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️ BFS 함수 ⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️









int main()
{
    cin >> T; //test case
    for (int testcase = 0; testcase < T; testcase++)
    {
        cin >> N >> K; //맵의 크기 N, 나무를 벨 수 있는 횟수 K
        
        // ⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️ 맵 정보 입력 받기 ⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
            {
                scanf(" %c", &map[i][j]); // 앞에 공백 추가
                if (map[i][j] == 'X') 
                {   // RC카의 처음 시작 위치 좌표 받기
                    init_X = i;
                    init_Y = j;
                }
                else if (map[i][j] == 'Y') 
                {   // 목표지점 좌표 받기
                    target_X = i;
                    target_Y = j;
                }

            }
        }
        // ⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆
        // ⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️ 맵 정보 입력 받기 ⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️⬆️
        
        

        cout << '#' << testcase + 1 << ' ' << '\n';
    }
}